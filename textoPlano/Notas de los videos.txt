para el logo utlizamos:

<figure> 
	<img>
</figure>

Menus: 
ul: lista desordenada | | ol: lista ordenada

Duplicar elementos con Ctrl + Shift + D

<nav>
	<ul>
		<li><a>articulo 1</a></li>
		<li><a>articulo 2</a></li>
		<li><a>articulo 3</a></li>
		<li><a>articulo 4</a></li>
	</ul>
</nav>

Contenido:

Titulos: solo puede haber un h1 por página.

botones:
	<button>
	</button>

Contenido especifico:
	<articule> Cada entrada del blog debe ser un article.
	</article> 

<Article>
	<img>
	<h3></h3>
	<ol>
		<li></li>
		<li></li>
		<li></li>
	</ol>
</article>

Buenas practicas:

Poner a las imagenes el atributo Alt: contiene una descripción detallada de la imagen para que se muestre si está no carga por X o Y motivo

si la imagen no es cuadrada, solo poner el hancho, para que el tamaño se calcule automaticamente.

para que habra un link una nueva pesaña se pone el atributo target = "_blank" 

Id: header, portada, contenido.

Estilos:

	Etiqueta en el head : link para enlasar con los estilos.


Agregar clase a header, figure class logotipo, nav class menu
	section class portada, h1 class titulo

Usar comic sans MS como fuente y Monotype corsiva para los textos usar Myriad pro

Disposición: cómo el elemento se va a hubicar en su entorno, es llamado display.

Tipos:
	inline: si se pone un contenido se pone al lado de ese elemento.

	Block: un bloque usa todo el campo que tenga a sus costados. Por lo que el proximo elemento se hubica abajo de este. 

	inline-block: al usar este atributo se puede ordenar los elementos uno al lado del otro, además de porder modificar sus margenes, bordes y paddings debido a que se comporta como una bloque.


Voy en Entendiendo el modelo de caja.

con | y el nombre de la fuente puedo optimizar la carga de la página ver más información en video 3.7 Google fonts

Modelo de caja:

Margin
border
padding
Contenido
padding
border
Margin

Margin: espacio entre la etiqueta y la etqueta subyacente.
Border: burde de la caja de la etiqueta.
Padding: espacio entre el contenido de la etiqueta y el borde de la misma.

tipo de borde dashed, es un borde con lineas que tienen un espacio entre ellas

Idea: el titulo del div_2 lo podemos partir en 2 uno con menos gerarquia par que se vea más bonito. lo mismo con el titulo del primero

Positions:
	relative: relativa con respecto a su contenedor.

	absolute: posición absoluto con respecto a la etiqueta padre relativo más cercana.

	fixed: posición fija. si queremos que un elemento se quede fijo mientras nos movemos usamos esta.

	ineriht: para heredar la posición de su padre

	initial: para reiniciar al valor por defecto

	static: valor por defecto

Podemos usar estas propiedades para mover el elemento a nuestro grupo.

Left 
Top
right
bottom

Border radius funciona como los margin pero comenza desde la esquina superior izquierda.


Footer:
	hacer dos divs para la imagen y los datos de contacto.
	esta se llama contacto
	la otra va  llevar un formulario, esta se llama formulario
	
	El telefono va a ser un <a> para que se pueda llamar desde el pc o movil. Dentro de ella va una etiqueta strong para la palabra telefono y otra span para el número
	href="tel:número" así se hacen llamadas.
	href="mailto:correo" así se envian correos.

Formulario:

Atributos de los campos de input: text, es el basico.
	email verifica que tenga @ y dominio
	required da prioridad y valida que tenga contenido.
	value: es para poner contenido por defecto.
	placeholder: resive el texto que tenga el campo que da una ayuda al usuario.
	si agregamos for y id en otro elemento con el mismo valor cuando demos click al for va a hacer focus al id
	ta seleccionar solo una cosa y que vaya esta información cuando se envie al backend
	para seleccion multiple los input son de tipo checkbox
	para poner mucho más texto se pone un textarea, y tiene cols (columnas) y rows (filas)
	input tipo submit, boton de envio de formulario en el value va el texto que muestra el botón.
	los values van en todos los inputs que no reciben un texto en si.

Flex box:
	funciona con display flex. felx es un atributo que afecta a los hijos del item.
	para trabajar horizontalmente usamos:
	justify-content:
		atrbutos: flex-start (por defecto- alineados a la izquierda)
		flex-end( alineados a la derecha)
		center: alineado al centro
		space-around:(mejor dispocición con los margenes de los lados segun su padre)
		space-between(solo espaciados entre el contenedor) cuadno las cajas se esten po pegar se pasen una abajo de la otra con:
	flex-wrap:wrap; cuando se juntencomienzan a caer.
	flex-direction: se usa para cambiar de horizontal a vertical o viseversa.
	aling-items: center centra perfecta


-el tamaño y la posición de los datos de contacto se arregla dandele un tamaño a su padre
-quitar el out-line de los input y textarea del formulario
-poner en el input:focus y textarea un background a gris lightgray

usar colorzilla.com/gradient-editor/

Transiciones:

	Hoover con hoover podemos afectar a los hijos del elemento con el hoover, de la sigiente manera: 
	.clase:hoover hijo_del_elemento

	Las transcciones de tiempo funcionan de la siguiente manera:

	.clase{
		transition: tiempo en milisegundos(.8s);
}	

	Las transformaciones funcionan de la siguiente manera:
		.clase{
		transform: scale(valor);
}


	Para mover los elementos lo hacemos con la siguiente tecnica:

	.clase{
	transform: translateY(px);
}

	.clase:hoover{
	transform:translateY(px);
}


Transiciones:
	Las partes de las transcisiones puede tener 2 sintaxis
	La larga:
	-Duración: transition-duration: en milisengundos o segundos;
	-propiedades: transition-property:puedo afectar las siguentes propedades;
		-background-color
		-background-position
		-background-size
		-border-color
		-border-width
		-color
		-borderradius
		-font-size
		-font-weight
		-height width
		-left right bottom top
		-padding
		-opacity

	-aceleracón: transition-timing-function: existen varios tipos;
		-ease
		-ease-in
		-esae-ot
		-ease-in-out
		-step-start
		-linear

	La corta:
	-Se ponen los 3 valores en la misma linea respetando el orden tiempo-propiedad-aceleración


Transform:
	Podemos modificar la forma y la posición sn afectar a los elementos que lo rodean.
	los tipos de transformaciones son:
	-Rotación : rotate(en grados {deg});
	-Escala : scale(va de 0 a lo que quiera);
	-Sesgado : skew(en grados{deg});
	-Traslación : translateEJE(px);con translate3d(EJEx(px), EJEy(px), EJEZ(px); para que funcione el ejeZ el padre debe tener perspective: númeropx;
	-mixtas : transform: rotate() scale(2) skew(deg) traslateX(px);

	se declara con la propiedad transform


Truco para las imagenes: si inspeccionas la imagen puedes obtenr el link de la misma y así la podemos utlizar en otras páginas.

Seudo clases:

:after{
	content: "contenido";
}

:last-child:after o before o lo que sea el caso{
	se hace lo que queramos
}

Para hubicar un elemento ensima de otro lo que hacemos es ponerle una posicion absoluta y relativa a su padre.

Con display: inline; el elemento se comporta como texto.

Librerias para formularios: jquery validation es uno; para angular o react busca angular from validation or angularjs from validation

para heredar las propiedades del padre como el alto podemos poner height:inherit

Propiedad box-shadow:
	box-shadow: tipo x y difuminado color;
		tipo: inset, dentro sin nada queda por default
		x y: posicion en los ejes.
		difuminado: grado del tamaño conr especto a sus otros vertices.
		Color: el que quiras.

Para que una propiedad css se vea por ensima de todas las otras reglas le ponemos al final !important;

Para que el boton se haga pequeño cuando le den click, lo que hacemos es darle una pseudoclase :active {

:active{
	transform: scale(.9);
}
 y si queremos le damos una transición.

Puedes alinear elementos de diferentes formas una de ellas es con flex-box con la propiedad aling-items:center.
o sin flex-box con la propiedad vertical-aling: middle;

Open graph facebook.es la forma de poner en las páginas los estilos para que aparescan estilizados cuando se publiquen en facebook: toda la documentación esta en:

https://developers.facebook.com/docs/sharing/webmasters

Segundo reto:

Si queres que un elemento tenga todo el tamaño del monitor con posiciones absolutas debes poner las propiedades left:0; rigth: 0;

Este desafio lo resolvemos con flex-box.

Lo hacemos poniendole display: flex al body.
le damos el alto al padre de todo que es el bodyes min-height:100vh; las medidas son viewport height y width
Le damos un flex-drection:colum;

y para hacer el tamaño del buerpo lo ponemos la propiedad flex:1;

Libros recomendados:
	Css secrets - better solutions to everyday web desing problems.

	Combinación de frameworks: front-end reactjs
		para ajax: superagent.
		para manejar datos y como fluyen: reducts.
		aprender python con django
		para estilos: stylus.
		para fechas: moments.

Transiciones con hoover tercer reto:

	Podemos hubicar un background con:
     background-position: pos.horizontal pos.vertical;
Ejemplo      background-position: center bottom;
y quitamos el background-repeat: no-repeat;

Para poner una transformación continua:
	Aplicamos animaciones:
	animation: tiempo nombre_de_la_animación repetición;
ejemplo animation: 2s animacion1 infinite;

	@keyframes animacion1 {
		puede ser con proporciones: 0%-50%-100%
		o con el metodo from-to
	ejemplo:
		from{
			Propiedades de css se ponen iguales
			border:1px solid black;
	}
		to{
			Propiedades de css se ponen iguales
			border:1px solid black;
	}

	utilzar los porcentajes:
		0%{
			ponemos las propiedades css		
	}
		50%{
			ponemos las propiedades css
	}
		100%{
			ponemos las propiedades css
	}
}

podemos conbinar las propiedades de transform.

Para hacer elementos responsive con position absolute, debemos poner los alementos en un contenedor (div) y ponerle las dimenciones despues hubicarlo en left, rigth, bottom o top según sea el caso y despues darle un margin como si fuera un elemento con display block, es decir:
 le ponemos margin: 0 auto;


Efecto parallax

	Capturamos el evento de la pantalla:
		window.addEventListener('scroll' ,function(e){
		console.log(e);
	});

	Saber el desplazamiento en el eje Y:
		Console.log(window.scrollY);

	Cambiar las propiedades: 

	primero definimos la variable:
		const $nombre_de_la_constante = document.getElementById('id');

	Cambiamos el margen según se mueva el scroll:

	$nombre_de_la_constante.style.marginTop = window.scrollY + 'medida(px,em,etc)';

	mover el backgroun position
	$nombre_de_la_constante.style.backgroundPosition = window.scrollY + 'medida(px,em,etc)';
	Lo podemos poner negativo: '-' window.scrollY + 'medida(px,em,etc)';
	para calcular un movimiento lo que hacemos es poner una variable donde le sumamos lo que queremos a window.scrollY; y modificamos así:
	$nombre_de_la_constante.style.backgroundPosition = variable + 'medida(px,em,etc)';

Hacer una transfiormación en JS:
	$nombre_de_la_constante.style.transfrom = 'rotate(' + position(*#de rotación en porcentaje .2 .5) + 'deg)';

--

Mascaras en Css:

	Hacer un div con la clas e de la mascara, le damos el background de la imagen que queremos que sea la sombra; le damos un ancho y alto, ahora debemos posicionarlo por lo que al elemento que queremos cambiar le damos position:relative, y al shade le damos position:absolute y los movemos top,right, left, bottom hasta que este este ensima de la imagen a cambiar con scroll.

le damos un id a la sombra para poderla mover con JS

propiedad background-position:
	background-position: #px;



Ahora debemos poner otroa mascara que nos muestre solo lo que queremos de la sombra con la propiedad:
	mask-imgen: url(); y usamos el webkit para navegadores

y ahora lo hubicamos esactamente en el lugar que queremos.

Buscar:
	Back-face-visibility.